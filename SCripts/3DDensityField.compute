// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "./Kernels.compute"
struct LavaPoint {
    float3 Position;
    float3 Velocity;
    float4 Color;
};
int ParticleCount ;
int FieldWidth;
int FieldHeight;
int FieldDepth;
float VoxelSize;
RWStructuredBuffer<float3> PredictedPosition;
RWStructuredBuffer<float> DensityValuesBuffer;
RWTexture3D<float> DensityTexture;

float CalcDensity(float3 RealPos) {
    float Density = 0;
    float sqrRadius = SmoothingRadius * SmoothingRadius;

    for(uint i = 0; i<ParticleCount; i++) {
        float3 Direction = PredictedPosition[i]-RealPos;
        float sqrDstToNeighbour = dot(Direction, Direction);
        float Distance = sqrt(sqrDstToNeighbour);

        if (sqrDstToNeighbour > sqrRadius) continue; // For some unkown reason very important not to compare distance and radius directly, breaks everything

        Density+=SpikyKernelPow23D(Distance,SmoothingRadius);
    }
    return Density;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    if ((id.x >= FieldWidth)) return;
    if ((id.y >= FieldHeight)) return;
    if ((id.z >= FieldDepth)) return;

    float3 RealPos = float3(-FieldWidth/2,0,-FieldDepth/2)* VoxelSize + ((float3)id) * VoxelSize;
    DensityTexture[id] = CalcDensity(RealPos);
    DensityValuesBuffer[id.x+id.y*FieldWidth+id.z*FieldWidth*FieldHeight] = CalcDensity(RealPos);
}
