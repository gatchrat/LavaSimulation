// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Simulation
#pragma kernel DensityCache
#pragma kernel CalcHashes
#pragma kernel LOADSDF
#pragma kernel PredictPositions
#pragma kernel UpdateSpatialHash
#pragma kernel ReorderCopyBack
#pragma kernel Reorder
#pragma kernel SortHashesNeu
#pragma kernel  CalculateOffsets 
#pragma kernel Activate

#include "./Tools.compute"
#include "./SpatialHash3D.compute"

float TimePassed;
float TargetDensity; // How thick is the Liquid
float PressureMultiplier; //How Fast should we reach the target state
float NearPressureMultiplier;
float ViscosityMultiplier;
float BoundsWidth; //Centered on 0
float BoundsHeight; //Beginning on 0 
float BoundsDepth; //Centered on 0
// Grid size and threshold
int3 GridSize;
float IsoLevel;
int FieldWidth;
int FieldHeight;
int FieldDepth;
int ParticleToActivate;
float VoxelSize;
float3 Spawnpoint;
//SDF
float3 SDF_OffSet;
float3 SDF_Scale;
float TemperatureExchangeSpeedModifier;
float MaxAge;
RWStructuredBuffer<float3> PredictedPosition;
RWStructuredBuffer<float> DensityValuesBuffer;
RWTexture3D<float> DensityTexture; // 3D Density Field
RWStructuredBuffer<float2> CachedDensities;
RWStructuredBuffer<float3> VertexBuffer;
RWStructuredBuffer<int> VertexCount;
RWStructuredBuffer<float> SDFValues;

//SEB
RWStructuredBuffer<uint> SpatialKeys; // used for spatial hashing
RWStructuredBuffer<uint> SpatialOffsets; // used for spatial hashing
RWStructuredBuffer<uint> SortedIndices;

// Lookup tables
StructuredBuffer<int> EdgeTable;      // 256 entries
StructuredBuffer<int> TriTable;       // 256 * 16 entries

//--------Slightly adapted from: https://github.com/SebLague/Fluid-Planet/blob/main/Assets/Scripts/Simulation/Compute/FluidSim.compute
RWTexture3D<float> SDFTexture;
Texture3D<float4> SDFReadTexture;
float3 SDFSize;
uint3 SDFValueCount;
SamplerState linearClampSampler;

const float4x4 sdfWorldToLocalMatrix;
float SampleSDF(float3 posWorld) {
    float3 sdfWorldSize = float3(SDFValueCount.x,SDFValueCount.y,SDFValueCount.z);
    float3 uvw = (posWorld + sdfWorldSize / 2) /sdfWorldSize;
    float dstFromSurface = SDFReadTexture.SampleLevel(linearClampSampler, uvw, 0).r;
    return dstFromSurface;
}

float3 calculateSDFNormal(float3 pos) {
    const float s = 4;
    float3 offsetX = int3(1, 0, 0) * s;
    float3 offsetY = int3(0, 1, 0) * s;
    float3 offsetZ = int3(0, 0, 1) * s;

    float dx = SampleSDF(pos + offsetX) - SampleSDF(pos - offsetX);
    float dy = SampleSDF(pos + offsetY) - SampleSDF(pos - offsetY);
    float dz = SampleSDF(pos + offsetZ) - SampleSDF(pos - offsetZ);

    return normalize(float3(dx, dy, dz));
}
float3 WorldToSDF(float3 pos) {
    pos = pos - float3(SDF_OffSet.x,SDF_OffSet.y,SDF_OffSet.z);
    float3 tempScale = SDF_Scale*(SDFSize.x/SDFValueCount.x);
    pos = float3(pos.x/tempScale.x,pos.y/tempScale.y,pos.z/tempScale.z);
    return pos;
}
void ResolveCollisionsSDF(inout float3 pos, inout float3 vel, float collisionDamping) {
    float dstFromSurface = SampleSDF(WorldToSDF(pos));
    if (dstFromSurface < 0) {
        float3 up = calculateSDFNormal(WorldToSDF(pos)); // Richtung zu
        pos -= up * min(0, dstFromSurface);
        if (dot(vel, up) < 0) {
            vel -= up * dot(up, vel);
            vel *= collisionDamping;
        }
    }
}
//-----------------------------------------------------------------------------------------------------------------------

float3 CalcPosition (LavaPoint Point) {
    return Point.Position+Point.Velocity*TimePassed;
}
float GetPressureFromDensity(float Density) {
    float DensityDiff = Density-TargetDensity;
    float Pressure = DensityDiff * PressureMultiplier;
    return Pressure;
}
float NearPressureFromDensity(float NearDensity) {
    return NearDensity * NearPressureMultiplier;
}
float CalcSharedPressure(float DensityA, float DensityB) {
    float a = GetPressureFromDensity(DensityA);
    float b = GetPressureFromDensity(DensityB);
    return(a+b)/2;
}
float CalcSharedNearPressure(float DensityA, float DensityB) {
    float a = NearPressureFromDensity(DensityA);
    float b = NearPressureFromDensity(DensityB);
    return(a+b)/2;
}
float3 CalcPressureForce(int PointID) {
    LavaPoint Point = Points[PointID];

    float2 Density = CachedDensities[PointID];
    if(Density.x == 0) {
        return float3(0,0,0);
    }
    float3 DirectionalPressure = 0;
    float sqrRadius = SmoothingRadius * SmoothingRadius;

    float3 MyPosition = PredictedPosition[PointID];
    int3 originCell = GetCell3D(MyPosition, SmoothingRadius);

    for (int i = 0; i < 27; i++) {
        uint hash = HashCell3D(originCell + offsets3D[i]);
        uint key = KeyFromHash(hash, ParticleCount);
        uint currIndex = SpatialOffsets[key];
        while (currIndex < ParticleCount) {
            uint neighbourIndex = currIndex;
            currIndex++;

            // Skip if looking at self
            if (neighbourIndex == PointID)
            continue;

            uint neighbourKey = SpatialKeys[neighbourIndex];
            // Exit if no longer looking at correct bin
            if (neighbourKey != key)
            break;
            //-----------------------------------
            float3 Direction = PredictedPosition[neighbourIndex]-MyPosition;
            float sqrDstToNeighbour = dot(Direction,Direction);
            float Distance = sqrt(sqrDstToNeighbour);

            if (sqrDstToNeighbour <= sqrRadius) {
                float3 AbsDirection = Distance > 0 ? Direction / Distance : float3(0, 1,0);
                float NeighborDensity = CachedDensities[neighbourIndex].x;
                float Slope = DerivativeSpikyPow23D(Distance,SmoothingRadius);
                float SharedPressure = CalcSharedPressure(Density.x,NeighborDensity);
                float NeighborNearDensity = CachedDensities[neighbourIndex].y;
                float NearSlope = DerivativeSpikyPow33D(Distance,SmoothingRadius);
                float NearSharedPressure = CalcSharedNearPressure(Density.y,NeighborNearDensity);
                if(NeighborDensity > 0) {
                    DirectionalPressure += AbsDirection*Slope*SharedPressure/NeighborDensity;
                    DirectionalPressure += AbsDirection*NearSlope*NearSharedPressure/NeighborNearDensity;
                }
            }
            //-----------------------------------
        }
    }
    return DirectionalPressure/Density.x;
}

//Particles closeby slow me down or speed me up, kinda like friction.
float3 CalcViscosityForce(int PointID) {
    if (ViscosityMultiplier == 0) {
        return float3(0,0,0);
    }
    LavaPoint Point = Points[PointID];

    float3 ViscosityForce = 0;
    float sqrRadius = SmoothingRadius * SmoothingRadius;

    float3 MyPosition = PredictedPosition[PointID];
    int3 originCell = GetCell3D(MyPosition, SmoothingRadius);

    for (int i = 0; i < 27; i++) {
        uint hash = HashCell3D(originCell + offsets3D[i]);
        uint key = KeyFromHash(hash, ParticleCount);
        uint currIndex = SpatialOffsets[key];
        while (currIndex < ParticleCount) {
            uint neighbourIndex = currIndex;
            currIndex++;

            // Skip if looking at self
            if (neighbourIndex == PointID)
            continue;

            uint neighbourKey = SpatialKeys[neighbourIndex];
            // Exit if no longer looking at correct bin
            if (neighbourKey != key)
            break;
            //-----------------------------------
            float3 Direction = PredictedPosition[neighbourIndex]-MyPosition;
            float sqrDstToNeighbour = dot(Direction,Direction);
            float Distance = sqrt(sqrDstToNeighbour);

            if (sqrDstToNeighbour <= sqrRadius) {
                float3 NeighborVelocity = Points[neighbourIndex].Velocity;
                float Influence = SmoothingKernelPoly63D(Distance,SmoothingRadius);
                ViscosityForce += (NeighborVelocity-Point.Velocity)*Influence;
            }
            //-----------------------------------
        }
    }
    return float3(ViscosityForce.x,ViscosityForce.y,ViscosityForce.z)*ViscosityMultiplier;
}
float CalcAge(int PointID) {
    LavaPoint Point = Points[PointID];

    float3 age = 0;
    float sqrRadius = SmoothingRadius * SmoothingRadius;

    float3 MyPosition = PredictedPosition[PointID];
    int3 originCell = GetCell3D(MyPosition, SmoothingRadius);

    for (int i = 0; i < 27; i++) {
        uint hash = HashCell3D(originCell + offsets3D[i]);
        uint key = KeyFromHash(hash, ParticleCount);
        uint currIndex = SpatialOffsets[key];
        while (currIndex < ParticleCount) {
            uint neighbourIndex = currIndex;
            currIndex++;

            // Skip if looking at self
            if (neighbourIndex == PointID)
            continue;

            uint neighbourKey = SpatialKeys[neighbourIndex];
            // Exit if no longer looking at correct bin
            if (neighbourKey != key)
            break;
            //-----------------------------------
            float3 Direction = PredictedPosition[neighbourIndex]-MyPosition;
            float sqrDstToNeighbour = dot(Direction,Direction);
            float Distance = sqrt(sqrDstToNeighbour);

            if (sqrDstToNeighbour <= sqrRadius) {
                float NeighborAge = Points[neighbourIndex].age;
                float Influence = SmoothingKernelPoly63D(Distance,SmoothingRadius);
                age += (NeighborAge-age)*Influence*0.00001;
            }
            //-----------------------------------
        }
    }
    return age;
}
float3 CalcVelocity (int PointID) {
    LavaPoint Point = Points[PointID];
    const float3 Gravity = float3(0,-9.81,0);
    Point.Velocity+=Gravity*TimePassed;
    //F =a/m where m is the density because fluid
    if(Point.age > 0) {
        Point.Velocity +=CalcPressureForce(PointID)*TimePassed;
        Point.Velocity +=CalcViscosityForce(PointID)*TimePassed;
    }
    return Point.Velocity;
}

LavaPoint ReColor(int PointID) {
    LavaPoint Point = Points[PointID];
    Point.Color =  float4(CachedDensities[PointID].x,0,0,0);
    return Point;
}

LavaPoint HandleCollision(LavaPoint Point) {
    if(Point.active == 0) {
        return Point;
    }
    const float EnergyLossOnCollision = 0.5f;
    const float EnergyLossOnCollisionFloor = 0.7f;
    if (Point.Position.y < 0) {
        Point.Position.y = 0;
        Point.Velocity = float3(Point.Velocity.x,-Point.Velocity.y*EnergyLossOnCollisionFloor,Point.Velocity.z);
    }
    /*if (Point.Position.y > BoundsHeight) {
        Point.Position.y = BoundsHeight;
        Point.Velocity = float3(Point.Velocity.x,-Point.Velocity.y*EnergyLossOnCollisionFloor,Point.Velocity.z);
    }*/
    if (Point.Position.x < -BoundsWidth/2) {
        Point.Position.x = -BoundsWidth/2;
        Point.Velocity = float3(-Point.Velocity.x*EnergyLossOnCollision,Point.Velocity.y,Point.Velocity.z);
    }
    if (Point.Position.x > BoundsWidth/2) {
        Point.Position.x = BoundsWidth/2;
        Point.Velocity = float3(-Point.Velocity.x*EnergyLossOnCollision,Point.Velocity.y,Point.Velocity.z);
    }
    if (Point.Position.z < -BoundsDepth/2) {
        Point.Position.z = -BoundsDepth/2;
        Point.Velocity = float3(Point.Velocity.x,Point.Velocity.y,-Point.Velocity.z*EnergyLossOnCollision);
    }
    if (Point.Position.z > BoundsDepth/2) {
        Point.Position.z = BoundsDepth/2;
        Point.Velocity = float3(Point.Velocity.x,Point.Velocity.y,-Point.Velocity.z*EnergyLossOnCollision);
    }
    float3 Position = Point.Position;
    float3 Velocity = Point.Velocity;

    ResolveCollisionsSDF(Position, Velocity,EnergyLossOnCollision);

    Point.Position = Position;
    Point.Velocity = Velocity;

    return Point;
}

[numthreads(256,1,1)]
void Simulation (uint3 id : SV_DispatchThreadID) {
    if (id.x >= ParticleCount) {
        return;
    }
    LavaPoint CurPoint = Points[id.x];
    if(CurPoint.active == 0) {
        return;
    }
    if(CurPoint.age > MaxAge) {
        return;
    }
    CurPoint = ReColor(id.x);
    CurPoint.Velocity = CalcVelocity(id.x);
    CurPoint.Position = CalcPosition(CurPoint);
    CurPoint.age += TimePassed ;
    CurPoint.age = CurPoint.age+ CalcAge(id.x)*TimePassed*TemperatureExchangeSpeedModifier;
    Points[id.x] = HandleCollision(CurPoint);
} 
int ActiveParticles;
[numthreads(1,1,1)]
void Activate (uint3 id : SV_DispatchThreadID) {
    if(ParticleToActivate == 0) {
        return;
    }
    for(int i = ActiveParticles; i < ParticleCount; i++) {
        if(Points[i].active == 0) {
            Points[i].active = 1;
            Points[i].Position = Spawnpoint+((float3)offsets3D[i%27])/5;
            Points[i].Velocity = float3(-1,5,2);
            ParticleToActivate -= 1;
            if(ParticleToActivate == 0) {
                return;
            }
        }
    }
}
//------------------------------------------------------------DENSITY CACHE ---------------------------------------------------------------------------------

float2 CalcDensity(int PointID) {
    float2 Density = (0,0);
    float sqrRadius = SmoothingRadius * SmoothingRadius;
    float3 MyPosition = PredictedPosition[PointID];
    int3 originCell = GetCell3D(MyPosition, SmoothingRadius);

    for (int i = 0; i < 27; i++) {
        uint hash = HashCell3D(originCell + offsets3D[i]);
        uint key = KeyFromHash(hash, ParticleCount);
        uint currIndex = SpatialOffsets[key];
        while (currIndex < ParticleCount) {
            uint neighbourIndex = currIndex;
            currIndex++;

            uint neighbourKey = SpatialKeys[neighbourIndex];
            // Exit if no longer looking at correct bin
            if (neighbourKey != key)
            break;
            //-----------------------------------
            float3 Direction = PredictedPosition[neighbourIndex]-MyPosition;
            float sqrDstToNeighbour = dot(Direction, Direction);
            float Distance = sqrt(sqrDstToNeighbour);

            if (sqrDstToNeighbour <= sqrRadius) {
                Density.x+=SpikyKernelPow23D(Distance,SmoothingRadius);
                Density.y+=SpikyKernelPow33D(Distance,SmoothingRadius);
            }
            //-----------------------------------
        }
    }
    return Density;
}
[numthreads(256,1,1)]
void DensityCache (uint3 id : SV_DispatchThreadID) {
    if (id.x >= ParticleCount) {
        return;
    }
    LavaPoint CurPoint = Points[id.x];
    CachedDensities[id.x] = CalcDensity(id.x);
}
//------------------------------------------------------------POSITION PREDICTOR ---------------------------------------------------------------------------------
float3 PredictPosition(int PointID) {
    LavaPoint CurPoint = Points[PointID];
    float3 PredictedPosition = CurPoint.Position + (CurPoint.Velocity+float3(0,-9.81,0)/120)/120;
    return PredictedPosition;
}
[numthreads(256,1,1)]
void PredictPositions (uint3 id : SV_DispatchThreadID) {
    if (id.x >= ParticleCount) {
        return;
    }
    PredictedPosition[id.x] = PredictPosition(id.x);
}
//------------------------------------------------------------LOAD SDF---------------------------------------------------------------------------------
[numthreads(8,8,8)]
void LOADSDF (uint3 id : SV_DispatchThreadID) {
    if(any(id >= SDFValueCount)) {
        return;
    }
    SDFTexture[id] = SDFValues[id.x+id.y*SDFValueCount.x+id.z*SDFValueCount.x*SDFValueCount.y];
}
//------------------------------------------------------------STANDARD HASH ---------------------------------------------------------------------------------
//Idea: Turn the Simulation area into grids
//When searching for neioghbors simply look only into my and neighboring grids
//Nutzen Spacial Hash von https://cg.informatik.uni-freiburg.de/publications/2011_CGF_dataStructuresSPH.pdf
//Später vielleich compact spacial Hash
//Compute Hash for Point
//Sort Points by Hash
//Save Starting indizes for Each Hash
//To get neibors
//Calc my hash and of each surrounding grid
//Based on the start indizes go through points and calc distance

[numthreads(256,1,1)]
void CalcHashes (uint3 id : SV_DispatchThreadID) {
    if(id.x >=ParticleCount) {
        return;
    }
    LavaPoint CurPoint = Points[id.x];

    Hashes[id.x].hash =CalcHash(CurPoint.Position+float3(10,0,10));//Move Pos to always be positive
    Hashes[id.x].index = id.x;
}
//SOURCE:https://github.com/SebLague/Fluid-Sim/blob/Episode-01/Assets/Scripts/Compute%20Helpers/GPU%20Sort/Resources/BitonicMergeSort.compute
//------------------------------------------------------------------------------------------------------------------------------------------
const uint numEntries;
const uint groupWidth;
const uint groupHeight;
const uint stepIndex;
[numthreads(256, 1, 1)]
void SortHashesNeu (uint3 id : SV_DispatchThreadID) {
    uint i = id.x;

    uint hIndex = i & (groupWidth - 1);
    uint indexLeft = hIndex + (groupHeight + 1) * (i / groupWidth);
    uint rightStepSize = stepIndex == 0 ? groupHeight - 2 * hIndex : (groupHeight + 1) / 2;
    uint indexRight = indexLeft + rightStepSize; 

    // Exit if out of bounds (for non-power of 2 input sizes)
    if (indexRight >= numEntries) return;

    uint valueLeft = SpatialKeys[indexLeft];
    uint valueRight = SpatialKeys[indexRight];

    // Swap entries if value is descending
    if (valueLeft > valueRight) {
        uint temp = SpatialKeys[indexLeft];
        SpatialKeys[indexLeft] = SpatialKeys[indexRight];
        SpatialKeys[indexRight] = temp;

        temp = SortedIndices[indexLeft];
        SortedIndices[indexLeft] = SortedIndices[indexRight];
        SortedIndices[indexRight] = temp;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------
//SEB HASH REPLACE LATER 
[numthreads(256, 1, 1)]
void UpdateSpatialHash(uint3 id : SV_DispatchThreadID) {
    if (id.x >= ParticleCount)
    return;
    uint index = id.x;
    int3 cell = GetCell3D(PredictedPosition[index], SmoothingRadius);
    uint hash = HashCell3D(cell);
    uint key = KeyFromHash(hash, ParticleCount);

    SpatialKeys[id.x] = key;
    SortedIndices[id.x] = id.x;
    SpatialOffsets[id.x] = ParticleCount; // Reset offsets
}

RWStructuredBuffer<LavaPoint> SortTarget_Points;
RWStructuredBuffer<float3> SortTarget_PredictedPositions;

[numthreads(256, 1, 1)]
void Reorder(uint3 id : SV_DispatchThreadID) {
    if (id.x >= ParticleCount)
    return;
    uint sortedIndex = SortedIndices[id.x];
    SortTarget_Points[id.x] = Points[sortedIndex];

    SortTarget_PredictedPositions[id.x] = PredictedPosition[sortedIndex];
}

[numthreads(256, 1, 1)]
void ReorderCopyBack(uint3 id : SV_DispatchThreadID) {
    if (id.x >= ParticleCount)
    return;

    Points[id.x] = SortTarget_Points[id.x];
    PredictedPosition[id.x] = SortTarget_PredictedPositions[id.x];
}

StructuredBuffer<uint> SortedKeys;
RWStructuredBuffer<uint> Offsets;
uint numInputs;
[numthreads(256, 1, 1)]
void CalculateOffsets(uint3 id : SV_DispatchThreadID) {
    if (id.x >= numInputs) {
        return;
    }

    uint i = id.x;
    uint null = numInputs;

    uint key = SortedKeys[i];
    uint keyPrev = i == 0 ? null : SortedKeys[i - 1];

    if (key != keyPrev) {
        Offsets[key] = i;
    }
}