// MarchingCubes.compute

#pragma kernel March

RWStructuredBuffer<float3> VertexBuffer;
AppendStructuredBuffer<int> TriangleBuffer;

Texture3D<float> DensityTexture;

int3 GridSize;
float IsoLevel;

// Lookup tables
StructuredBuffer<int> EdgeTable;      // 256 entries
StructuredBuffer<int> TriTable;       // 256 * 16 entries

static const int3 vertexOffset[8] = {
    int3(0, 0, 0), int3(1, 0, 0), int3(1, 1, 0), int3(0, 1, 0),
    int3(0, 0, 1), int3(1, 0, 1), int3(1, 1, 1), int3(0, 1, 1)
};

static const int2 edgeVertexIndices[12] = {
    int2(0,1), int2(1,2), int2(2,3), int2(3,0),
    int2(4,5), int2(5,6), int2(6,7), int2(7,4),
    int2(0,4), int2(1,5), int2(2,6), int2(3,7)
};

// Interpolate edge vertex
float3 VertexInterp(float iso, float3 p1, float3 p2, float valp1, float valp2) {
    float t = (iso - valp1) / (valp2 - valp1);
    return lerp(p1, p2, saturate(t));
}

[numthreads(8,8,8)]
void March(uint3 id : SV_DispatchThreadID) {
    if (id.x >= GridSize.x || id.y >= GridSize.y || id.z >= GridSize.z) return;

    float cube[8];
    float3 pos[8];

    // Sample density field
    for (int i = 0; i < 8; i++) {
        int3 offset = id + vertexOffset[i];
        cube[i] = DensityTexture.Load(int4(offset, 0));
        pos[i] = offset;
    }

    // Build cube index
    int cubeIndex = 0;
    for (i = 0; i < 8; i++) {
        if (cube[i] < IsoLevel) cubeIndex |= (1 << i);
    }

    int edgeFlags = EdgeTable[cubeIndex];
    if (edgeFlags == 0) return;

    float3 vertList[12];

    // Find intersection vertices on edges
    for (i = 0; i < 12; i++) {
        if (edgeFlags & (1 << i)) {
            int2 e = edgeVertexIndices[i];
            vertList[i] = VertexInterp(IsoLevel, pos[e.x], pos[e.y], cube[e.x], cube[e.y]);
        }
    }

    // Create triangles
    for (i = 0; i < 5; i++) {
        int triIndex = i * 3;
        if (TriTable[cubeIndex * 16 + triIndex] == -1) break;

        for (int j = 0; j < 3; j++) {
            int edge = TriTable[cubeIndex * 16 + triIndex + j];
            float3 v = vertList[edge];
            uint idx = VertexBuffer.IncrementCounter();
            VertexBuffer[idx] = v;
            TriangleBuffer.Append(idx);
        }
    }
}
