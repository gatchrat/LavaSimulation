// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct LavaPoint {
    float3 Position;
    float3 Velocity;
    float4 Color;
};

float SmoothingRadius;
RWStructuredBuffer<LavaPoint> Points;
RWStructuredBuffer<float> CachedDensities;
RWStructuredBuffer<float3> PredictedPosition;

float SmoothingKernel(float radius, float distance) {
    if(distance > radius) {
        return 0;
    }
    float volume = (3.141*pow(radius,4))/6; // Volumne of area -> So we dont get higher density with bigger radius
    return (radius-distance)*(radius-distance)/volume;
}
float CalcDensity(int PointID) {
    float Density = 0;
    uint PointNumber = 10;
    uint ThrowAway;
    Points.GetDimensions(PointNumber,ThrowAway);
    for(uint i = 0; i<PointNumber; i++) {
        if(PointNumber == PointID) {
            continue;
        }
        float Distance = abs(length(PredictedPosition[i]-PredictedPosition[PointID]));
        Density+=SmoothingKernel(SmoothingRadius,Distance);
    }
    return Density;
}

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    LavaPoint CurPoint = Points[id.x];
    CachedDensities[id.x] = CalcDensity(id.x);
}
