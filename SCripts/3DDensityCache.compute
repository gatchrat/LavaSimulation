// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct LavaPoint {
    float3 Position;
    float3 Velocity;
    float4 Color;
};

float SmoothingRadius;
RWStructuredBuffer<LavaPoint> Points;
RWStructuredBuffer<float> CachedDensities;

float SmoothingKernel(float radius, float distance) {
    if(distance > radius) {
        return 0;
    }
    float volume = 3.141*pow(radius,8)/4; // Volumne of area -> So we dont get higher density with bigger radius
    //small values go smaller big values go bigger
    float value = max(0,radius*radius -distance*distance);
    return value*value*value/volume;
}
float CalcDensity(float3 Position) {
    float Density = 0;
    uint PointNumber = 10;
    uint ThrowAway;
    Points.GetDimensions(PointNumber,ThrowAway);
    for(uint i = 0; i<PointNumber; i++) {
        float Distance = length(Position-Points[i].Position);
        Density+=SmoothingKernel(SmoothingRadius,Distance);
    }
    return Density;
}

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    LavaPoint CurPoint = Points[id.x];
    CachedDensities[id.x] = CalcDensity(CurPoint.Position);
}
