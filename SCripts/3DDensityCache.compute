// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "./Kernels.compute"
struct LavaPoint {
    float3 Position;
    float3 Velocity;
    float4 Color;
};

RWStructuredBuffer<LavaPoint> Points;
RWStructuredBuffer<float> CachedDensities;
RWStructuredBuffer<float3> PredictedPosition;

float CalcDensity(int PointID) {
    float Density = 0;
    uint PointNumber = 10;
    uint ThrowAway;
    Points.GetDimensions(PointNumber,ThrowAway);
    for(uint i = 0; i<PointNumber; i++) {
        if(PointNumber == PointID) {
            continue;
        }
        float Direction = PredictedPosition[i]-PredictedPosition[PointID];
        float Distance = sqrt(dot(Direction,Direction));
        if(Distance < SmoothingRadius) {
            Density+=SpikyKernelPow2(Distance,SmoothingRadius);
        }
    }
    return Density;
}

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    LavaPoint CurPoint = Points[id.x];
    CachedDensities[id.x] = CalcDensity(id.x);
}
