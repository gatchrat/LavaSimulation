// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "./Tools.compute"

RWStructuredBuffer<float> CachedDensities;
RWStructuredBuffer<float3> PredictedPosition;

float CalcDensity(int PointID) {
    float Density = 0;
    float sqrRadius = SmoothingRadius * SmoothingRadius;
    uint PointNumber = 10;
    uint ThrowAway;
    Points.GetDimensions(PointNumber,ThrowAway);
    for(uint i = 0; i<PointNumber; i++) {
        if(PointNumber == PointID)  continue;

        float3 Direction = PredictedPosition[i]-PredictedPosition[PointID];
        float sqrDstToNeighbour = dot(Direction, Direction);
        float Distance = sqrt(sqrDstToNeighbour);

        if (sqrDstToNeighbour > sqrRadius) continue; // For some unkown reason very important not to compare distance and radius directly, breaks everything

        Density+=SpikyKernelPow22D(Distance,SmoothingRadius);
    }
    return Density;
}

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    LavaPoint CurPoint = Points[id.x];
    CachedDensities[id.x] = CalcDensity(id.x);
}
