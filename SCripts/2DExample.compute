// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "./Kernels.compute"
struct LavaPoint {
    float3 Position;
    float3 Velocity;
    float4 Color;
};

float TimePassed;
float TargetDensity; // How thick is the Liquid
float PressureMultiplier; //How Fast should we reach the target state
RWStructuredBuffer<LavaPoint> Points;
RWStructuredBuffer<float> CachedDensities;
RWStructuredBuffer<float3> PredictedPosition;

float3 CalcPosition (LavaPoint Point) {
    return Point.Position+Point.Velocity*TimePassed;
}
float GetPressureFromDensity(float Density) {
    float DensityDiff = Density-TargetDensity;
    float Pressure = DensityDiff * PressureMultiplier;
    return Pressure;
}
float CalcSharedPressure(float DensityA, float DensityB) {
    float a = GetPressureFromDensity(DensityA);
    float b = GetPressureFromDensity(DensityB);
    return(a+b)/2;
}
float3 CalcPressureForce(int PointID) {
    LavaPoint Point = Points[PointID];

    float Density = CachedDensities[PointID];
    float3 DirectionalPressure = 0;
    float sqrRadius = SmoothingRadius * SmoothingRadius;
    uint PointNumber = 10;
    uint ThrowAway;
    Points.GetDimensions(PointNumber,ThrowAway);
    for(uint i = 0; i<PointNumber; i++) {
        if(i == PointID) continue;
        float3 Direction = PredictedPosition[i]-PredictedPosition[PointID];
        float sqrDstToNeighbour = dot(Direction,Direction);
        float Distance = sqrt(sqrDstToNeighbour);

        if (sqrDstToNeighbour > sqrRadius) continue;

        float3 AbsDirection = Distance > 0 ? Direction / Distance : float3(0, 1,0);
        float NeighborDensity = CachedDensities[i];
        float Slope = DerivativeSpikyPow2(Distance,SmoothingRadius);
        float SharedPressure = CalcSharedPressure(Density,NeighborDensity);
        DirectionalPressure += AbsDirection*Slope*SharedPressure/NeighborDensity;
    }
    return float3(DirectionalPressure.x,DirectionalPressure.y,0)/Density;
}

float3 CalcVelocity (int PointID) {
    LavaPoint Point = Points[PointID];
    const float3 Gravity = float3(0,-9.81,0);
    Point.Velocity+=Gravity*TimePassed;
    //F =a/m where m is the density because fluid
    Point.Velocity +=CalcPressureForce(PointID)*TimePassed;
    return Point.Velocity;
}

LavaPoint ReColor(int PointID) {
    LavaPoint Point = Points[PointID];
    Point.Color =  float4(CachedDensities[PointID],0,0,0);
    return Point;
}
LavaPoint HandleCollision(LavaPoint Point) {
    const float EnergyLossOnCollision = 0.5f;
    const float EnergyLossOnCollisionFloor = 0.7f;
    if (Point.Position.y < 0) {
        Point.Position.y = 0;
        Point.Velocity = float3(Point.Velocity.x,-Point.Velocity.y*EnergyLossOnCollisionFloor,Point.Velocity.z);
    }
    if (Point.Position.y > 8) {
        Point.Position.y = 8;
        Point.Velocity = float3(Point.Velocity.x,-Point.Velocity.y*EnergyLossOnCollisionFloor,Point.Velocity.z);
    }
    if (Point.Position.x < -7) {
        Point.Position.x = -7;
        Point.Velocity = float3(-Point.Velocity.x*EnergyLossOnCollision,Point.Velocity.y,Point.Velocity.z);
    }
    if (Point.Position.x > 7) {
        Point.Position.x = 7;
        Point.Velocity = float3(-Point.Velocity.x*EnergyLossOnCollision,Point.Velocity.y,Point.Velocity.z);
    }
    return Point;
}

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    LavaPoint CurPoint = Points[id.x];
    CurPoint = ReColor(id.x);
    CurPoint.Velocity = CalcVelocity(id.x);
    CurPoint.Position = CalcPosition(CurPoint);
    Points[id.x] = HandleCollision(CurPoint);
}